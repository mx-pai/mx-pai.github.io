<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>梯子使用指南</title>
    <link href="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>中国互联网防火墙我们也都清楚，我们不能访问Youtube、Google、Twitter（X）这些国外网址，在日常中Github的使用都会受限制，我们就无法享受到自由的访问互联网资源，很多时候都吃“嗟来之食”，本文介绍我使用的梯子，利用代理服务来进行FQ。</p><h2 id="代理商">代理商</h2><p><a href="https://mitce.com/aff.php?aff=6185">Mitce</a><br>这个是梯子的节点代理商，本人也是尝试了很多不同的VPN和梯子，最终找到了这个价格低、速度快、节点多、使用方便的代理，点击<a href="https://mitce.com/aff.php?aff=6185">Mitce</a>即可进入，下面是使用指南</p><h3 id="Mitce使用指南">Mitce使用指南</h3><ol><li>注册<br>点击进去的首界面应该是这样的<br><img src="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image.png" alt="alt text"><br>如果英文界面使用不变的话，右上角可以切换中文，自行注册账号即可（邮箱注册）</li><li>商品<br>直接点击商店选择自己要购买的套餐，个人套餐分为0.5$和3$两种套餐，0.5$的是一个月100G流量，可供5台设备使用，带宽是1000Mbps，3$的豪华款就是无限制流量和2000Mbps的带宽，我一般是用0.5$（合人民币3.65￥）套餐，感觉是够用的，根据自己的需求选择，价格也不是很贵，可以先直接点击购买，方便后面的使用，当然你可以选择看完全文再考虑是否购买</li><li>服务<br>购买之后，进入服务界面<br><img src="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image-1.png" alt="alt text">就可以看到自己的商品，点击管理进入商品详情页，这样能看到流量使用详情，直接向下滑动<br><img src="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image2.png" alt="alt text"><br>可以看到他们的使用文档，你可以使用，当然我这篇博客就是教你如何使用的，<br>看到下面的自动URL了吧，这个后面还有用，可以先复制</li></ol><h2 id="代理客户端">代理客户端</h2><h3 id="Clash-Verge-AND-Clash-meta">Clash Verge AND Clash meta</h3><p>购买完节点套餐，肯定用代理客户端来使用套餐，我尝试了几个不同的客户端，最后选择的是PC端的(点击即可进入，找到自己电脑的版本下载)<a href="https://github.com/zzzgydi/clash-verge/releases/tag/v1.3.8">Clash Verge</a>和安卓手机端的(同上，下载apk文件)<a href="https://github.com/MetaCubeX/ClashMetaForAndroid/releases/tag/v2.9.0">Clash Meta</a>，当然可能手机或者电脑会对软件尽享审查，无视风险继续安装即可（本人自己使用无碍，如果有问题，望君阅读文章末尾的免责声明），如果选择使用别的客户端请自行查阅指南，下面我会给出这两款的使用指南和问题处理，如果无法安装或者下载不成功等问题，可以评论区联系我或者发送邮件给<a href="mailto:3369437848@qq.com">Me</a>，有空会帮你解答</p><h3 id="1-Clash-Verge-For-Windows">1.Clash Verge For Windows</h3><ol><li>设置<br>详细你已经下载完成，接下来就带你使用这款小猫咪软件<br><img src="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image3.png" alt="alt text">打开settings，可以先将Language改为中文，先别离开<img src="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image4.png" alt="alt text">先将系统设置改为系统代理，下滑找到Clash内核，点击齿轮，更改为Clash meta，这样基本设置就已经完成</li><li>订阅<br>打开订阅界面<img src="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image5.png" alt="alt text">（还记得不）将刚才在Mitce购买的套餐地址粘贴然后导入，如果前面按照步骤来，应该会导入成功，如果有问题，和上面说法一样，联系我或者自行寻找答案。</li><li>使用<br>订阅成功的话，你就可以成功使用梯子进行翻墙了，默认是自动选择节点，按照需求，依然可以自己在代理一行，手动更改节点（Tips：台湾&amp;香港速度快但是很多优有限制）</li><li>关闭<br>关闭软件，需要在windous托盘关闭<img src="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/image6.png" alt="alt text">直接叉掉是默认关不掉的</li><li>问题<br>我用的时候一个最大的问题是关电脑时忘记关闭Clash，再次使用电脑时会连不上网，下面给出解决方案，如果对原因感兴趣的话自行搜索<br>解决方案：</li></ol><blockquote><p>打开控制面板—&gt;打开网络和Internet—&gt;打开Internet选项—&gt;点击上方连接—&gt;点击局域网设置—&gt;将勾选代理服务器一栏给取消然后点击确定—&gt;成功</p></blockquote><h3 id="2-Clash-meta-For-Android">2.Clash meta For Android</h3><ol><li>下载安装<br>详情见前文</li><li>代理使用<br>直接点击Profile，然后右上方加号，再然后URL导入，复制粘贴购买的套餐地址</li><li>使用<br>因为及其简单，就不再赘述（开箱即用了这）</li></ol><h2 id="后记">后记</h2><p>仍记得第一次FQ看到外网的经历，让我很是害怕，但是回过头想想，我现在已经对事情有了自己的思考，并不会被人“牵着鼻子走”，但是如果没有墙的话，外网的某些事情确实会对中文互联网腐蚀，进而影响没有判断能力的未成年人，所以不可否认，互联网墙计划给我们千禧一代营造了一个虽然封闭但是很有保护的互联网环境，对于我来说，FQ目前是必须的（要不然博客都没法提交了……），但是一定要记住，<strong>我们不要被人当枪使，不管看到什么都要有独立且清醒的思考,For you，For me</strong><br><a href="https://sstrojan.com/hello-world/">一些别人写的注意事项</a>，</p><hr><p>如果文章对你有帮助的话，欢迎打赏(♥_♥)</p><p><img src="/2024/06/08/%E6%A2%AF%E5%AD%90%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/1717858901394.png" alt="微信打赏"></p><h2 id="免责声明">免责声明</h2><p>必须给自己叠几层甲，工具使用一定要符合规范。</p><ol><li>法律责任声明：<br>本文仅为提供技术信息和知识之用，不鼓励或支持任何违反当地法律法规的行为。读者需自行了解并遵守所在国家或地区的相关法律法规，因使用本文提及的技术和工具而引起的任何法律责任均由读者自行承担。</li><li>安全风险声明：<br>使用代理工具可能会涉及数据隐私和安全风险。请确保使用可靠和信誉良好的服务提供商，妥善保护个人信息和隐私。因使用不安全的代理服务而导致的数据泄露或其他安全问题，本站概不负责。</li><li>技术支持声明：<br>本文提供的设置和使用指南仅为一般性建议，可能因软件版本、服务提供商等因素而有所不同。如遇到具体技术问题，请联系相应的服务提供商或寻求专业技术支持。因使用本文提供的信息导致的任何问题或损失，本站概不负责。</li><li>网络连通性声明：<br>由于网络环境和服务提供商的变化，翻墙工具的连接稳定性和有效性可能会有所波动。本站不对任何代理服务的持续可用性做出保证，因网络连接问题导致的任何不便或损失，本站概不负责。</li><li>第三方链接声明：<br>本文可能包含指向第三方网站或服务的链接，这些链接仅为方便读者提供。本站对这些第三方网站或服务的内容、隐私政策或实践不承担任何责任。读者在访问和使用这些第三方网站或服务时，请自行承担风险。</li><li>信息准确性声明：<br>本文中的信息力求准确和最新，但由于技术更新和政策变化，某些内容可能会过时或不准确。本站不对本文内容的准确性或完整性做出任何承诺或保证。读者应根据自身情况进行进一步研究和验证</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毕奥-萨伐尔定律与安培环路定律的思考</title>
    <link href="/2024/06/06/%E6%AF%95%E5%A5%A5-%E8%90%A8%E6%B3%95%E5%B0%94%E5%AE%9A%E5%BE%8B%E4%B8%8E%E5%AE%89%E5%9F%B9%E7%8E%AF%E8%B7%AF%E5%AE%9A%E5%BE%8B%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <url>/2024/06/06/%E6%AF%95%E5%A5%A5-%E8%90%A8%E6%B3%95%E5%B0%94%E5%AE%9A%E5%BE%8B%E4%B8%8E%E5%AE%89%E5%9F%B9%E7%8E%AF%E8%B7%AF%E5%AE%9A%E5%BE%8B%E7%9A%84%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h2 id="一、毕奥-萨伐尔定律">一、毕奥-萨伐尔定律</h2><p><strong>毕奥-萨伐尔定理(Biot-Savart Law)</strong>： 电流元$Id\vec{l}$ 在空间某点P处产生的磁感应强度$d\vec{B}$的大小与电流元$Id\vec{l}$的大小成正比，与电流元$Id\vec{l}$所在处到P点的位置矢量和电流元$Id\vec{l}$之间的夹角的正弦成正比，而与电流元$Id\vec{l}$ 到P点的距离的平方成反比。<br>公式：<br>$\vec{B}(\vec{r}) = \frac{\mu_0}{4\pi} \int \frac{I , d\vec{\ell} \times \vec{r}}{|\vec{r}|^3}$</p><p><strong>计算载流长直线导线产生的磁场</strong><br>题目：<br>如果在一段有限长直线电流旁边P点，距离直线电流直线距离为$a$，计算P点出的磁感应场强B</p><p><img src="/2024/06/06/%E6%AF%95%E5%A5%A5-%E8%90%A8%E6%B3%95%E5%B0%94%E5%AE%9A%E5%BE%8B%E4%B8%8E%E5%AE%89%E5%9F%B9%E7%8E%AF%E8%B7%AF%E5%AE%9A%E5%BE%8B%E7%9A%84%E6%80%9D%E8%80%83/image.png" alt="题目如上"></p><p>题目的解法也比较简单，主要是利用了换元然后积分的思想</p><p>第一步：<br>$\frac{d\vec{y} \times \vec{r}}{r^3} = \frac{dy \cdot \sin \theta}{r^2} = \left( \frac{a}{\sin \theta} d\theta \right) \cdot \sin \theta \left( \frac{a}{\sin \theta} \right)^2 = \frac{\sin \theta d\theta}{a}$</p><p>第二步：<br>$\frac{\mu_0}{4\pi} \int \frac{d\vec{y} \times \vec{r}}{r^3} = \frac{\mu_0 I}{4\pi a} \int_{\theta_1}^{\theta_2} \sin \theta d\theta$</p><p>于是求完积分得到<br>$\frac{\mu_0}{4\pi} \int \frac{d\vec{y} \times \vec{r}}{r^3} = \frac{\mu_0 I}{4\pi a}(\cos \theta_1 - \cos \theta_2)$</p><p>因为是无限长的直导线，所以可以近似取$\theta_1 = 0,theta_2 = \pi$</p><p>于是得到最终表达式：</p><p>$B = \frac{\mu_0 I}{2\pi a}$</p><p>在学习这个定理的时候会很迷惑，这TM怎么推出来的这个定理，书上说，是由<strong>拉普拉斯</strong>抽象出来的，不愧是大神，NB</p><p>但是在之后学习安培环路定理的时候，我发现无限长直导线推导出来的磁感应强度的公式同样也是<br>$B = \frac{\mu_0 I}{2\pi a}$<br>这不就相当于反过来论证了前面的定理的有效性</p><h2 id="二、安培环路定理">二、安培环路定理</h2><p><strong>安培环路定理</strong>：在真空的恒定磁场中，磁感强度B延任意闭合路径的积分的值，等于$\mu_0$乘以该闭合路径所包围的各电流的代数和<br>公式：</p><p>$\oint \vec{B} \cdot d\vec{l} = \mu_0 \Sigma I$</p><p>具体推导过程就不再赘述了，如果利用这个定理来求无线长直导线的磁场就手到擒来了<br>还是那上题来说<br>$\oint \vec{B} \cdot d\vec{l} = B \cdot 2\pi a =  \mu_0 I$</p><p>于是得到</p><p>$B = \frac{\mu_0 I}{2\pi a}$</p><h2 id="三、结论">三、结论</h2><p>**安培环路定理(Ampère’s circuital law)<strong>和</strong>毕奥-萨伐尔定理(Biot-Savart law)**是电磁学中描述磁场和电流关系的两个基本定律，它们在概念上是相互联系的。</p><ol><li><p>应用范围：安培环路定理适用于稳恒电流产生的磁场，而毕奥-萨伐尔定理适用于非稳恒电流产生的磁场。</p></li><li><p>宏观与微观：安培环路定理通常用于宏观电流分布，而毕奥-萨伐尔定理用于计算微观电流元素产生的磁场。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>physics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在变革中寻找自我</title>
    <link href="/2024/06/01/%E8%AE%B2%E5%BA%A7%E6%80%BB%E7%BB%93/"/>
    <url>/2024/06/01/%E8%AE%B2%E5%BA%A7%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今日看了张雪峰讲座的一个视频，是昨天在哈工程的分享讲座，有很多感触，先将视频链接附上：<br><a href="https://www.bilibili.com/video/BV12z421a75g/?share_source=copy_web&amp;vd_source=344afadcc6aa59bf1acf6283137d9a14">张雪峰老师40岁人生感悟，哈工程收官之作（完整版)</a></p><p>回想去年，我为什么来到南邮，也是有张雪峰的很大原因，张雪峰之所以很多人信他，一个重要的原因就是他话语的犀利与深刻，他总能一针见血地指出来访者的矛盾点与问题冲突，因此让他人就更能相信他。在这个讲座里，张老师真真切切地讲述了他成长到如今对于人生的思考与对学生的启迪</p><p>第一部分，张老师是给我们提了四个建议</p><ol><li>保持自信</li><li>拥抱变化</li><li>行业深耕</li><li>持续学习</li></ol><h2 id="保持自信">保持自信</h2><p>保持自信，可不是当普信，我记得上高中时和一位朋友交流时，他给我说了一句话，“我们考到一中，就是中考几万人中的佼佼者，我们本来就很优秀”，这句话就让我很触动，我们本就优秀，为何还会如此“自卑”，其实这是一个非常普遍的心理现象“骗子综合征”，即在不成功时感觉自己不够好，自己充满无助与巨大的落差，在成功时反而感觉自己就是运气好，不敢大方表达自己的优秀，这就是存在我们心里的自卑感，但是这并不是说自卑感不好，反而有时自卑意味着一个人对自我是敏感且有察觉的，这种特质本身是优势，正如阿德勒在《自卑与超越》一书中提到：“自卑感是个人在追求优越地位时，一种正常的发展过程”，我们要学会以平常心看待自卑，接纳自卑，使之成为自信。所以之后我们要对自己说：</p><p><code>你已经很棒了，这没啥的，自信起来</code></p><h2 id="拥抱变化">拥抱变化</h2><p>记得以前看书上记住的一句话，<code>唯一能确定的就是不确定性</code>，我们天生就害怕未知和不确定的事，所以当发生突变时或者情况脱离掌握的时候，我们会感到很紧张和手忙脚乱，我们要学会<strong>拥抱变化</strong>，还有一句真理，变化中的才是机遇，近十年来，我们经历了偌大的改变，回首时，有人会说，10年前我要是做好ppt，5年前我要是去做自媒体……这些就是当时的变化，我们是错过的，但大多数他们那个时期的人何尝不也是错过的，对于现在的我们，世界也是在一个巨大的变化当中，停滞不前只会被时代抛弃，所以我们要以变化的眼光看世界，要能看到先机，要拥抱变化</p><h2 id="行业深耕">行业深耕</h2><blockquote><p>21天学好C++，10天学会Java</p></blockquote><p>这些话一点也不陌生，甚至不仅仅在计算机领域，各种营销宣传快速学好一门语言，但是如果我们认真的去想想为什么会有所这种东西呢，是因为：大众化的急于求成，网上流传着这样的话“长江后浪推前浪，前浪死在沙滩上”，我们到现在的人生似乎都是催出来的，从网上看，这些话似乎是全国共通的，高中时好好读书考大学，其他的不要想,大学时，你要做这个做那个，毕业后，你要赶紧找到工作，然后，你要赶紧找个对象生孩子……于是我们开始心态浮躁，我们做了很多事情但回头看只是浅尝辄止</p><blockquote><p><strong>任何领域的卓越成就都只能通过一生的努力来获得；稍低一点的代价也换不来</strong></p></blockquote><p>我们要是想要成就某番事业就必须在其中深耕，找到自己热爱的事，为之不断付出，你坚持7年，你会成为一名专家，你坚持10年，你会是一名顶级专家，你坚持一辈子，你会成为“神”</p><p>这里分享一篇看过的文章<a href="https://www.cnblogs.com/TimePartners/articles/1177079.html">用十年来学会编程</a></p><h2 id="持续学习">持续学习</h2><p>我们如何变得更优秀？<strong>学习，也只有学习</strong> 有人会说，我学不好，但是我们是真的学不好吗？以一个很简单的例子，打游戏时，我们想学会一个新英雄，我们会一直选他，尝试他的技能，发现打不过别人，去分析原因，然后做出调整，之后变得越来越强，而学习也是如此，这是一个很有马克思唯物辩证思想的方法，就是发现问题 - 分析问题 - 解决问题 - 验证结果 - 正反馈，如果我们想学好一件事，其实也就是这个过程，在不断的循环中，我们就能做得很好，我们也就保持了一个持续学习的习惯</p><p>后半段讲座还讲了很多，我觉得这并不是鸡汤，而是对内心的一种探索，如果有时间的话，还要再重温一遍。</p>]]></content>
    
    
    <categories>
      
      <category>感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>讲座</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件开发与算法学习的警示</title>
    <link href="/2024/05/26/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AD%A6%E7%A4%BA/"/>
    <url>/2024/05/26/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%AD%A6%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<p><strong>明白一个函数的作用并相信它能完成这个任务，千万不要跳进这个函数里面企图探究更多细节，</strong> 否则就会陷入无穷的细节无法自拔，人脑能压几个栈啊。</p><h3 id="在代码与算法的迷宫中寻找出口：实用主义的力量">在代码与算法的迷宫中寻找出口：实用主义的力量</h3><p>在计算机科学的广袤天地中，我们既是探险者，也是建造者。我们面对着由代码构成的城堡和算法编织的迷宫。每一次深入探索，都是对知识边界的挑战。然而，在这个过程中，我们经常会遇到一个问题：我们学习这个到底是为了用而学，还是为了学会而学，这一直给我带来矛盾，这也让我想到了实用主义的力量</p><h4 id="信任代码：软件开发的实用哲学">信任代码：软件开发的实用哲学</h4><p>软件开发是一场与复杂性的斗争。我们每天都在使用各种函数和库，它们功能强大却复杂。我们应该如何对待这些工具？是将它们拆解到每一个螺丝钉，还是信任它们作为一个整体的效能？实用主义告诉我们，信任是关键。我们应当信任函数能够完成它们的任务，而不是跳入每一个函数内部，试图理解每一个细节。这种信任基于对社区智慧的尊重，以及对经过时间检验的代码的信任。</p><h4 id="算法的迷宫：深入与浅出的平衡">算法的迷宫：深入与浅出的平衡</h4><p>算法学习则是另一场探险。每一个算法都像是一个迷宫，有着复杂的路径和精妙的设计。我们是否应该深入每一个角落，探索每一条可能的路径？还是应该站在迷宫之上，把握其整体结构？实用主义再次为我们指明方向。我们应该理解算法的核心思想，知道它们能解决什么问题，而不是沉迷于每一个数学证明和实现细节。这样，我们才能在算法的迷宫中找到出口，而不是迷失在无尽的通道中。</p><h4 id="封装与抽象：简化复杂性的利器">封装与抽象：简化复杂性的利器</h4><p>无论是软件开发还是算法学习，封装和抽象都是我们简化复杂性的利器。封装让我们能够将复杂的实现隐藏起来，只暴露出必要的接口。抽象则让我们能够定义高层次的操作，而不必关心底层的具体实现。这两者都是实用主义的体现，它们帮助我们在不牺牲理解的前提下，减少认知负荷。</p><h4 id="认知资源的合理分配">认知资源的合理分配</h4><p>我们的认知资源是有限的，就像计算机的内存一样宝贵。在软件开发和算法学习中，我们需要合理分配这些资源。这意味着选择性地深入某些关键概念，同时对其他概念保持基本的理解。通过这种方式，我们可以更有效地利用我们的认知能力，避免陷入“栈溢出”的困境。</p><h4 id="实用主义的力量">实用主义的力量</h4><p>在软件开发和算法学习的旅程中，实用主义是我们的罗盘。它告诉我们何时应该深入，何时应该浅出。它教会我们信任我们的工具，同时保持对核心概念的理解。通过这种方式，我们可以更有效地构建软件，更深刻地理解算法，最终成为一名更出色的开发者或计算机科学家。</p><h4 id="生活的平衡艺术">生活的平衡艺术</h4><p>算法学习中的深入浅出，软件开发中的封装与抽象，就如同人生对知识的追求和对经验的积累，我们不可能对每一件事都了如指掌，但是我们要对事物有一个清晰的认知，常保持好奇，了解事物的本质，有助于让我们内心保持平静</p><p>实用主义不仅仅是一种编程哲学，还是一种生活哲学，我觉得实用主义的策略对日常甚或很有帮助</p><ol><li>合理分配自己的精力，对任务做好优先级排序，提高效率</li><li>保持好奇心，对事物有好奇心，但不要过度深究</li><li>复盘与调整，定期反思自己的方法与策略，做出调整</li></ol><hr><blockquote><p>一定要做一个清醒的人</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>525日</title>
    <link href="/2024/05/25/525%E6%97%A5/"/>
    <url>/2024/05/25/525%E6%97%A5/</url>
    
    <content type="html"><![CDATA[<p>看到一个小故事，让我想起了之前看《被讨厌的勇气》时的感悟，结合今天的特殊日子：“我爱我”日，写一篇博客作为记录</p><blockquote><p>20多岁时，我跟一个长辈说：&quot;我很担心，别人会怎么看待我做的那个决定。&quot;长辈说：“放心吧，你没有观众的。”<br>现在想起来，我认为这是我得到过的最好建议。<br>– 阿曼达·福蒂尼（Amanda Fortini），美国作家</p></blockquote><p>**《被讨厌的勇气》**的作者是日本作家岸见一郎与古贺史健，他们两人以对话的形式，通过青年与哲学家的对话，探讨了阿德勒心理学的核心理念，这本书鼓励人们面对内心的恐惧，接受自己的不完美，并且勇敢地追求自己的目标。</p><p>在此我不想对此书做过多叙述，我想通过书中的段落与今天的日子，来讲述我心中的阿德勒个体心理学</p><h2 id="原因论还是目的论">原因论还是目的论</h2><p>一直以来，我听过也看到过各种言论，比如过去的原生家庭对自己造成了多大的伤害，小时候的心理创伤对长大造成了很严重的影响，我也对这种原因论深信不疑，认为一切结果都有原因，过去发生的一切塑造了如今的我。但是当我在阅读时，读到哲人一番与原因论绝然不同的观点：</p><blockquote><p>决定我们自身的不是过去的经历，而是我们自己赋予经历的意义</p></blockquote><p>他提到，我们给过去的经历“赋予了什么样的意义”，这直接决定了我们的生活，人生不是别人富裕的而是由自己选择的，是自己选择自己如何生活，进一步说，我们的不幸也是自己选择的，我起初的反应如同书中的青年：“啊，你在说什么，我自己选择不幸，这是什么谬论呀”，但当哲人继续说下去时，我逐渐明白了哲人所说的话</p><p>我们会时常想要做出改变时，这时我们会面临两种选择，一方面是保持“现在的我”，这听来可能会有点奇怪，我都想改变了，为何还有这个选择，那就是因为，但我们在面临另一个选择“新的生活方式”时，我们不知道这条路怎么走，前方的危险如何面对，会不会有更加不幸，更加痛苦的事情在以后，这时，“保持现在的我”的观点就会浮现，我们对如今的我面临的困难是了解的，如何解决也是知晓的，于是我们即使有各种不满，也会认为保持现状会更加安心</p><p>想要改变又害怕改变而导致没有发生改变就是阿德勒提出的我们自己选择的保持现状的目的造就了如今的我，我们之所以不幸，并不是因为过去或者环境，更不是能力不足，而是因为，我们<strong>缺乏”获得幸福的勇气“</strong></p><p>我们如果一直活在“如果怎样怎样”的假设中，我们就永远不会做出改变，我们只是在为自己找到不做改变的借口</p><h2 id="人生不是与他人的比赛">人生不是与他人的比赛</h2><p>这让我想起了，从小到大我们一直被灌输的观点：谁谁谁怎么样，你要超过他，提高一分，干到千人……我们似乎一直被灌输着和他人作比较，与他人做竞争，当意识到竞争或胜负，那么势必就会产生自卑感，在不知不觉中，就会将他人乃至整个世界看作“敌人”，但事实上，别人真的会那么关注你吗，恐怕并非如此，“在意你脸的只有你自己”，这也是会导致自我意识的过剩，其实世上的人并不会关注我，即使我在大街上倒立也不会有人留意😆</p><p>如果站在竞争的角度考虑人际关系，我们很可能会将他人的成功当作我的失败，但如果我们将他人当作自己的伙伴，那么我们对世界的看法就会改变很<br>多，这个世界就变成了安全舒适的世界</p><h2 id="不要为满足别人的期待而活着">不要为满足别人的期待而活着</h2><p>阿德勒心理学否定寻求他人的认可。我们“并不是为了满足别人的期待而活着”，他人也不是为了满足你的期待而活。如果一味地寻求别人的认可在意他人的评价，那最终就会活在别人的人生里</p><p>无论是希望特别优秀还是希望特别差劲，其目的都一样—为了引起别人的关注，脱离“普通的状态”、成为特别的存在。阿德勒称为“廉价的优越感追求”。我们根本没必要特意炫耀自己的优越性，要有甘于平凡的勇气。</p><p>但这并不是我们不去追求变好，没有远大目标，而是看到自己的此时此刻。比如人生就是为了到达山顶的登山，那么人生的大半时光都是在“路上”，也就是说，真正的人生就是登上山顶的时候，那之前的路上就只是临时的人生？</p><p>人生中的最大的谎言就是不活在此时此刻，只关注根本不存在的过去和未来就是我们对现在撒的一个弥天大谎，人生其实是一连续的刹那，起决定作用的是此时此刻的自己</p><h2 id="拥抱自己，要有被讨厌的勇气">拥抱自己，要有被讨厌的勇气</h2><p>阿德勒心理学告诉我们应该从过去，未来以及人际关系中超脱出来，我们一直都有很自由，让我们一直裹足不前的其实是我们自己，我们要自我接纳，克服自卑，活出真实的自我，拥抱自己，找到真正的属于自己的幸福</p><hr><p>拙作一篇，欢迎提出建议</p>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01背包问题</title>
    <link href="/2024/05/24/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2024/05/24/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近两周是程序设计实验周，现在过去了一周，这一周可谓是非常的烧脑，学习了很多算法的设计，这篇博客就作为，算法笔记的开篇</p><p>对于开发程序来说<code>程序 = 算法 + 数据结构</code>算法对于程序员极其重要，这篇博客就依次记录一个经典的<strong>动态规划问题：</strong></p><blockquote><p><strong>0/1背包</strong><br>给定一组物品，每种物品都有自己的重量和价格，在限定的总重量内，我们如何选择，才能使得物品的总价格最高。</p></blockquote><p>分析一下题目，每一件物体都有装和不装两个选项（这也是0/1的来源），如果暴力穷举的话，每一次都要去比较价值，就非常麻烦</p><p>于是这题采用的算法思路是一个很经典的动态规划（dynamic programing）的思想</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> weight[];<br><span class="hljs-type">int</span> value[];<br></code></pre></td></tr></table></figure><p>先确定dp数组和下标的含义</p><p><code>dp[i][j]表示从下标0-i的物品取任意物品放进容积为j的背包的价值总和</code></p><p>然后是推导<code>dp[i][j]</code>数组，已知每一个物体都有两种状态</p><ul><li><p>如果不放这个物体，那就代表<code>dp[i][j] = dp[i-1][j]</code>,<code>i-1</code>就代表不放这第i的物体</p></li><li><p>如果放了这个物体呢，那么此时的背包价值<code>dp[i][j]</code>就可以用<code>dp[i-1][j-weight[i]]+value[i]</code>表示，这个含义就是放<code>i</code>这个物体的价值+背包容量变为<code>j-weight[i]</code>时的价值</p></li></ul><p>所以如果要找到最大价值可以调用C++中的<code>#include&lt;algorithm&gt;</code>中的<code>max函数</code></p><p>所以即为</p><blockquote><p><code>dp[i][j] = max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i])</code></p></blockquote><p>下一步是初始化数组</p><p>如果j为0，也就是背包容积为0，价值也一定为零，所以<code>dp[i][0]=0</code>，如果i为0，也就是放下标为0物体，价值也就是<code>value[0]</code>的价值，自己设置即可（当然也可以不这也初始化，全部初始化为零也行，因为最后比的是最大值）</p><p>所以具体代码实现过程为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= MaxWeight; j++)&#123;<br>            <span class="hljs-keyword">if</span>(j &gt;= w[i])&#123;<br>                dp[i][j] = max(dp[i<span class="hljs-number">-1</span>][j],dp[i<span class="hljs-number">-1</span>][j - weight[i]]+value[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                dp[i][j] = dp[i<span class="hljs-number">-1</span>][j];<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这样看过来感觉很容易，但实际上问题就在于，到底代码的实现逻辑是什么？</p><p>就可以通过将<code>dp[i][j]数组打印出来</code>看看到底怎么回事</p><p><img src="/2024/05/24/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/image.png" alt="dm"></p><p>可以发现我是采用初始化全为0的方式，从第二行开始看，此时判断了放入重量为1的物体，总价值就是6，看看何时会改变，在第三行表示选择放入2的价值变化，从6 先变成了 7再变成了13，什么意思呢，当我发现我能放下 重量为 4的物体且此时背包价值刚好为7，背包如果再大的话就会加上物体1的价值，也就是13，剩下的思路也是如此分析</p><p>可以发现动态规划一个关键点是找到规划数组的方程，在这个二维方程的每一个位置都是储存了价值最大的状态，当往后选择时，就会调用前面的状态作比较，于是最终得到背包里的最大值</p><p>附上我的源代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">100</span>;<br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> MaxWeight = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> num;<br>    cout &lt;&lt; <span class="hljs-string">&quot;你要装多少物体\n&quot;</span>;<br>    cin &gt;&gt; num;<br>    <span class="hljs-type">int</span> v[num], w[num];<br>    cout &lt;&lt; <span class="hljs-string">&quot;输入每个物体的重量和价值(最大质量是10kg)\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num; i++)&#123;<br>        cin &gt;&gt; w[i] &gt;&gt; v[i];<br>    &#125;<br>    <span class="hljs-type">int</span> dp[MAX][MAX] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= num; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= MaxWeight; j++)&#123;<br>            <span class="hljs-keyword">if</span>(j &gt;= w[i])&#123;<br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][j],dp[i<span class="hljs-number">-1</span>][j - w[i]]+v[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                dp[i][j] = dp[i<span class="hljs-number">-1</span>][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;能装的最大价值: &quot;</span> &lt;&lt; dp[num][MaxWeight] &lt;&lt; endl;<br>    cout &lt;&lt; <span class="hljs-string">&quot;背包装填状态详情\n&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= num; i++ )&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt;= MaxWeight;j++)&#123;<br>            cout &lt;&lt; dp[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    <span class="hljs-comment">//1 6 4 7 8 1 4 1 9 8测试集</span><br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>interesting-AI</title>
    <link href="/2024/05/19/intertsting-AI/"/>
    <url>/2024/05/19/intertsting-AI/</url>
    
    <content type="html"><![CDATA[<h2 id="AI的逻辑推理">AI的逻辑推理</h2><p>前几天看到一个逻辑题</p><p><code>如果昨天是明天就好了，那么今天就是周五了。请问句子中的今天是周几 </code><br>这个问题很有意思，我第一反应是今天是周三，我没有聚焦在昨天而是聚焦在其中的逻辑当中，就是如果昨天是明天，此时的明天是今天的明天，我将这个今天的明天当成一个具体的星期数，也就是星期四，那么也就是说，昨天是周四的话，今天就是星期五。可实际上今天是星期三</p><p>然后我的朋友给我的回答是今天是星期日，“星期日”怎么来的？我感到很疑惑，然后仔细想想，如果把昨天是明天这句话的明天当成周五的明天，也是就是说是周六，那么今天不就是周五嘛，此时实际上昨天是周六，那么实际上今天是周日</p><p>可能我说的也是很绕口，但是归因下来就是看你如何将一个含糊的昨天当成周几了<br>然后下面的标准答案，我觉得更能让人理解</p><blockquote><p>如果昨天是明天就好了，那么今天就是周五了。请问今天实际是周几？</p></blockquote><ul><li><p>答案一：【昨天周二，今天周三，明天周四】潜台词： “哎，今天怎么才周三啊，如果昨天不是周二，而是周四就好了，这样今天就是周五了，周末马上就要开始了。”（下意识把抽象的“明天”替换成了具体的周四 )</p></li><li><p>答案二：【昨天周六，今天周日，明天周一】潜台词： “哎，今天周日这么快就要过去了啊，如果周六不是在昨天，而是在明天就好了，这样今天才周五，周末才刚要开始。”（下意识把抽象的&quot;昨天”替换成了具体的周六）这么读起来，似乎周三和周日两种答案都对。</p><blockquote><p>但实际上，读着没问题，是因为采用了“不是…而是”的表达方式，替换以后的句子是符合大家的表达信息与接受信息的习惯的，是一个没有歧义的、把特定值赋予抽象值的过程</p></blockquote></li></ul><p>此时你可能感到奇怪了，这和AI的逻辑推理有什么关系，时间来到今天下午，我突然想到哎，如果是AI来回答这种问题，它能答上来吗？<br>在日常生活中，我们对AI的使用越来越频繁，但是我们很少去问AI逻辑推理问题，于是说试就试，我一共找来了六种大模型，包含市面上的最强大的几款，先说结果吧，只有一个大模型回答正确，就是Chat-gpt4o</p><table><thead><tr><th>模型</th><th>回答</th></tr></thead><tbody><tr><td>Chat-gpt4o</td><td>假设今天是X天。根据题意：“如果昨天是明天就好了，那么今天就是周五了。” 我们分析以下几点： 昨天是明天。 今天是周五。我们从今天是周五出发，逆推一下： 如果今天是周五，那么昨天是周四。如果昨天是周四，但题目中说“昨天是明天”，这意味着周四其实是明天所以，今天实际是周三。总结：今天是周三。</td></tr><tr><td>Kimi</td><td>这个逻辑谜题可以通过以下步骤来解决：假设今天是周五。昨天就是周四。明天就是周六。现在，让我们根据句子中的逻辑来分析：句子说：“如果昨天是明天就好了”，这意味着我们希望昨天（周四）是明天。但是，根据正常的周次顺序，昨天不可能是明天。句子接着说：“那么今天就是周五了”，这暗示了如果我们按照句子中的条件（昨天是明天），今天（原本是周四）就会变成周五。所以，如果我们接受句子中的条件，那么今天实际上是周四。因为句子中的逻辑是在说，如果昨天（周四）是明天，那么今天（原本是周四）就会是周五。但现实中，昨天不可能是明天，所以今天仍然是周四。</td></tr><tr><td>智谱清言</td><td>这个问题实际上是一个逻辑谜题。首先，我们需要理解句子中的条件：“如果昨天是明天就好了”。这句话意味着如果昨天（通常是周四）实际上是明天（通常是周六），那么今天就会是周日。但是，由于这是一个假设，我们需要找到符合这个假设的实际日期。如果昨天是明天，那么今天实际上是在假设中的“明天”的前一天，即周五。然而，由于我们知道这个假设是不真实的，我们需要找到符合这个假设的真实日期。因此，如果今天是周五，那么昨天实际上是周四，而明天是周六。但是，我们需要将这个逻辑倒转回来，因为原句是一个未实现的愿望。所以，如果昨天是明天，那么今天实际上是在假设中的“明天”的前一天，即周五。现在，我们知道今天实际上是周五的“前一天”，即周四。但是，由于这是一个假设，我们需要再次倒转逻辑。如果昨天是明天，那么今天实际上是在假设中的“明天”的前一天，即周五。然而，由于我们知道这个假设是不真实的，我们需要找到符合这个假设的真实日期。因此，如果今天是周五，那么昨天实际上是周四，而明天是周六。但是，我们需要将这个逻辑倒转回来，因为原句是一个未实现的愿望。所以，如果昨天是明天，那么今天实际上是在假设中的“明天”的前一天，即周五。 现在，我们知道今天实际上是周五的“前一天”，即周四。但是，由于这是一个假设，我们需要再次倒转逻辑。如果昨天是明天，那么今天实际上是在假设中的“明天”的前一天，即周五。最终，我们可以得出结论，如果昨天是明天，那么今天实际上是在假设中的“明天”的前一天，即周五。因此，今天的实际日期是周五。</td></tr><tr><td>Claude-3</td><td>根据这个句子的逻辑: 如果昨天是明天就好了 那么今天就是周五了 这意味着,如果昨天是明天的话,那么今天就应该是周五。 但是,这只是一个假设性的情况。实际上,今天是什么具体的星期几,这个句子并没有明确说明。所以,我们无法确定句子中所说的&quot;今天&quot;到底是周几,因为这只是一个假设性的情况,并没有给出实际的今天是哪一天。</td></tr><tr><td>Mistral</td><td>抱歉，我无法理解你想表达什么。如果你问今天是星期几，我可以回答，但是我不能理解你的话语中的逻辑。根据常识，今天是星期日。</td></tr><tr><td>零一万物</td><td>这个句子是一个逻辑谜题，我们可以这样分析：  如果昨天是明天，那么今天就是昨天和明天之间的日子，即今天就是昨天和明天的中间一天。 如果今天是周五，那么昨天是周四，明天是周六。但是根据句子的假设，昨天是明天，所以周四就是周六，这是不可能的，因为周四和周六不是同一天。因此，我们需要找到一个日子，它的前一天是它的后一天的前一天。这样的日子只能是周五，因为周五的前一天是周四，后一天是周六。所以，如果昨天是明天，那么今天只能是周五。根据这个逻辑，句子中的“今天”是周五。</td></tr><tr><td>Chat-gpt3.5</td><td>如果我们根据题目假设“如果昨天是明天就好了，那么今天就是周五了”，我们可以逆推一下：如果今天是周五，那么昨天应该是周四。但是根据题目，“如果昨天是明天”，那么昨天应该是周五。所以，这个假设存在矛盾，无法成立。因此，无法确定今天实际是周几。</td></tr></tbody></table><p>看到结果，就是很想笑，有些AI不知道就不回答，有些AI利用自己的逻辑推理，一本正经的胡说八道，但是这个小实验也是存在很多问题的，它们的数据集参差不齐，对其推理的结果会有很大的影响，不过这也可以说明，一般的AI对于逻辑推理能力是个弱项，Chat-gpt4o之所以能回答出来，就是它的参数足够大，能力足够强（刚发布能不强吗）</p><p>但其实这些还不是AI的全部实力，我是完全基于没有提示词来询问的，如果你先给出AI的提示词，就比如：<code>你现在是一名逻辑推理大师，下面有个问题想问你，请你给出回答。</code> 有一个先决条件，AI会回答的很好，自己去试试吧 （笔者试过）</p><p>人工智能会超过人类吗，我觉得是可以的，两年时间，大模型如雨后春笋般冒出，在使用中我们也是看到了AI的实力的进步，就比如前几天的Open AI 和 Google 发布的新模型，给世人带来了新的震撼，从AI对话到AI生图，到去年的视频模型以及附带的一系列AI工具，以及如今的AI实时互动，AI已经与我们密不可分，其带来的能力也让我们受益无穷，我们必须学会使用AI也要学会利用AI，减少自己的工作流程，形成自己的工作流，减轻自己的工作量，<strong>AI再怎么强大，也是为人类服务的</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>观察</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>骑行之旅</title>
    <link href="/2024/05/18/bike/"/>
    <url>/2024/05/18/bike/</url>
    
    <content type="html"><![CDATA[<h2 id="歌德曾说过：“人之所以爱旅行，不是为了抵达目的地，而是为了享受旅途中的种种乐趣。”">歌德曾说过：“人之所以爱旅行，不是为了抵达目的地，而是为了享受旅途中的种种乐趣。”</h2><p>如果问我为什么想要旅行，我会说，我就是想去亲自看看。</p><p>蜗居宿舍已经长达12天，也是&quot;感谢&quot;学校的合理安排，这十二天过得也是可谓充实，每日都在为了任务不断地行动。很是反感如此的安排，但又身为一名学生，却又不好多说什么。依我看来，调休所带来的不仅仅是身体上的疲惫，还有那属于内心深处地不想被安排<code>自由不是想做什么就做什么，而是不想做什么就可以不做</code> 我们失去了选择，于是反感这样的安排，但仔细想想，哪有人不是被安排的呢，在于命运持续做抗争的我们，也只是命运之下的棋子罢了，清醒有时是原罪。</p><p>昨日突发奇想，骑行去玄武湖，打开手机一看</p><p><img src="/2024/05/18/bike/1d48dc104d01b90a563161ff392a205e899bcf8d.jpg" alt="tp"></p><p>不过去去18公里，这不手到擒来，于是乎计划定下来，忙忙碌碌中午午休过后，与舍友一同出发</p><p>对我而言，让我感兴趣的不是那终点的玄武湖，而是能在旅途中感受到与世界的联系</p><p><strong>中午阳光很大</strong>随身携带了一瓶矿泉水，路上也看到了以往乘坐地铁所看不到的风景</p><p><img src="/2024/05/18/bike/8314a09f2d9f530261a1b39d90eea006cac674f5.jpg" alt="tp">梧桐（南京典型）上面好像在输液，令我奇怪的是，今天竟然没有，梧桐的飞絮，当年宋美龄“一句梧桐美“老蒋”种满南京城”的故事现在更是流传，不过梧桐的美在深秋，梧桐的“痛”在初夏😁</p><p>中途绕过钟山北，也是远远望到了紫金山(南京最高 海拔448.9m)虽不算是很高，但其“钟山龙蟠，石城虎踞”的称号自古极富盛名</p><p><img src="/2024/05/18/bike/703cc50c73b3c4e87d650bb25e77a9d2c9a1f45b.jpg" alt="tp"></p><p>最后也是成功到达玄武湖</p><p><img src="/2024/05/18/bike/4ed1af56213b5d49e47223cd252dfc2d3a717976.jpg" alt="tp"></p><p>看了下哈喽单车的数据和地图所显示的18公里差距有点大呀，不愧是“缺德地图”导航，到底孰真孰假，也是无法精确考证了。也是花了有1个小时才骑到，但是给我带来的主观体感不如体测两千米😕 ,以后定个更远的距离，外出就是舒坦</p><p><img src="/2024/05/18/bike/a59fbee4c669300e035ff19cbd0a2815daf64685.jpg" alt="tp"></p><hr><p>说是旅行，其实不过是一场说走就走的骑行，但是过程总是自己深有体会的，是在公共交通下永远无法感受的自然，我觉得了解城市更重要的是用自己的脚步丈量着城市，我从家乡考到南京来，是自己的选择也是迫不得已的选择，去年，我将南京的景点基本上去了个遍，给我带来的感受不是很好，我感觉无法真正爱上这个城市，就现在而言，在闲逛，citywalk，骑行都走过这个城市时，我发现南京最大的特点就是包容，她不会在意你是谁，她能在你能所想到的一切条件下，充分给予你最大的便利，不要奢望她的科技，因为她就是因其历史与人文而存在</p><blockquote><p>身体与灵魂总得有一个在路上，或读万卷书，或行万里路，但不要停滞不前</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2024/05/17/test1/"/>
    <url>/2024/05/17/test1/</url>
    
    <content type="html"><![CDATA[<h2 id="忙碌的下午">忙碌的下午</h2><p>上午高数课时，看到阮一峰大神的一篇博客文章<a href="https://jack-vanlightly.com/blog/2022/1/25/write-for-others-but-mostly-for-yourself">不要为别人写文章，而是要为自己而写</a>突然想起自己似乎丢下了一件一直想做的事情–写博客,几个月以前，我就想做这件事，然后去弄了框架，买了域名，当一切即将搞好的时候，我遇到了一个麻烦，我一直无法配置好我的Git Bash，我记得当时弄了好几天，最后实在不想弄了，于是这个想法被无限搁置。<br>记得前几天看到一本书里是这样说的</p><blockquote><p>不行是有机会做行的，而不做是永远不行的</p></blockquote><p>回顾我的生活过程中，我好像因为害怕的心理扔下了好几件事情：令我印象最深的就是大一时想去参加学校的辩论赛，其实我从初中就对这个很感兴趣，很想去在一个辩论的赛场上，尽情的发挥自己，但是结局是我报了名，在最后把自己的名字给删掉了，很好笑的是，我当时其实连辩论赛要穿的正装给买好了，直到现在那身衣服还在吃灰。后来我复盘时，我当时是咋想的嘞，好像就是怕了吧😢 ,我就在想如果是现在我会选择去参加吗？可惜没如果了哎</p><h2 id="奋起的高数课">奋起的高数课</h2><p>于是高数课时，我决定要改变，我在笔记里分析了已有的条件和手段，分析了思路，并彻底地理清了头绪</p><h2 id="悲催的下午">悲催的下午</h2><p>下午的课虽然没翘，但和翘课也没什么区别了，我决心要将这个博客网页给配置好，我先是删除了以前的文件，按照教程和官方文档重新安装，</p><blockquote><p>在此感谢这篇博文给我带来的极大帮助<a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程_hexo博客-CSDN博客</a></p></blockquote><p>本来是一件很轻松的事情,但硬生生地耗费了我四个小时的时间去搭建,背后原因很是搞笑😂 我的配置时代码一直敲错</p><p><code>npm</code>一直敲成<code>nmp</code>,于是就一直报错,一直报错我就一直找教程,然后一直弄不好,真的是很崩溃😱</p><p>下午的课都已经结束了,我还没有弄好,当我都再次想放弃时,突然我发现我的代码出错了,改正回来时,<code>Enter</code>键一敲,成功了,真不知道是该开心还是伤心</p><h2 id="饿着肚子-一鼓作气">饿着肚子,一鼓作气</h2><p>前面的错误一经更改,之后的速度就很快了,照着教程很快就将之前所准备的条件和今天弄好的软件结合,最后也是成功搭建完成</p><p><img src="/2024/05/17/test1/2024-05-17-23-53-02-image.png" alt="tupian"></p><p>超级兴奋,最后的成品就是目前所看到的样子(也是经过很长时间的更改)</p><h2 id="回顾">回顾</h2><p>这次地网站搭建让我彻底理解了<code>去做</code>这件事,阻挡我们的有时候不是事情的困难,而是我们的踟蹰不前</p><ul><li>这次就写到这了,很晚了呀,好困😵</li></ul>]]></content>
    
    
    <categories>
      
      <category>Diary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
